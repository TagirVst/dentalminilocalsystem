#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É—á—ë—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SERVICE_NAME="dental-backup"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service_status() {
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        echo "running"
    else
        echo "stopped"
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ç—É—Å
status() {
    echo "ü¶∑ –°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏"
    echo "=========================================================="
    echo ""
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    local service_status=$(check_service_status)
    if [[ "$service_status" == "running" ]]; then
        echo -e "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: ${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: ${RED}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
    echo "–ò–º—è —Å–µ—Ä–≤–∏—Å–∞: $SERVICE_NAME"
    echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(systemctl show -p User --value $SERVICE_NAME 2>/dev/null || echo 'unknown')"
    echo "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(systemctl show -p WorkingDirectory --value $SERVICE_NAME 2>/dev/null || echo 'unknown')"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if [[ "$service_status" == "running" ]]; then
        local uptime=$(systemctl show -p ActiveEnterTimestamp --value $SERVICE_NAME 2>/dev/null)
        if [[ -n "$uptime" ]]; then
            echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $uptime"
        fi
    fi
    
    echo ""
    
    # –°—Ç–∞—Ç—É—Å PostgreSQL
    if systemctl is-active --quiet postgresql; then
        echo -e "PostgreSQL: ${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "PostgreSQL: ${RED}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    echo ""
    echo "–°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
    if netstat -tuln 2>/dev/null | grep -q ":5000 "; then
        echo -e "–ü–æ—Ä—Ç 5000: ${GREEN}–û—Ç–∫—Ä—ã—Ç${NC}"
    else
        echo -e "–ü–æ—Ä—Ç 5000: ${RED}–ó–∞–∫—Ä—ã—Ç${NC}"
    fi
    
    if netstat -tuln 2>/dev/null | grep -q ":5432 "; then
        echo -e "–ü–æ—Ä—Ç 5432 (PostgreSQL): ${GREEN}–û—Ç–∫—Ä—ã—Ç${NC}"
    else
        echo -e "–ü–æ—Ä—Ç 5432 (PostgreSQL): ${RED}–ó–∞–∫—Ä—ã—Ç${NC}"
    fi
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo ""
    echo "–†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã:"
    echo "RAM: $(free -h | awk 'NR==2{printf "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %s –∏–∑ %s (%.1f%%)", $3, $2, $3/$2*100}')"
    echo "–î–∏—Å–∫: $(df -h . | awk 'NR==2{printf "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %s –∏–∑ %s (%s)", $3, $2, $5}')"
    
    # URL –¥–æ—Å—Ç—É–ø–∞
    echo ""
    echo "URL –¥–æ—Å—Ç—É–ø–∞:"
    local local_ip=$(hostname -I | awk '{print $1}')
    echo "‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π IP: http://$local_ip:5000"
    echo "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π IP: http://192.168.2.67:5000"
}

# –ö–æ–º–∞–Ω–¥–∞: –∑–∞–ø—É—Å–∫
start() {
    local service_status=$(check_service_status)
    
    if [[ "$service_status" == "running" ]]; then
        warn "–°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    log "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! systemctl is-active --quiet postgresql; then
        log "–ó–∞–ø—É—Å–∫ PostgreSQL..."
        sudo systemctl start postgresql
    fi
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    sudo systemctl start "$SERVICE_NAME"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 3
    
    if [[ $(check_service_status) == "running" ]]; then
        log "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        local max_attempts=10
        local attempt=1
        
        while [[ $attempt -le $max_attempts ]]; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 | grep -q "200\|302\|404"; then
                log "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
                break
            fi
            
            if [[ $attempt -eq $max_attempts ]]; then
                warn "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
            else
                echo -n "."
                sleep 2
                ((attempt++))
            fi
        done
    else
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
stop() {
    local service_status=$(check_service_status)
    
    if [[ "$service_status" == "stopped" ]]; then
        warn "–°–µ—Ä–≤–∏—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi
    
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    sudo systemctl stop "$SERVICE_NAME"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    sleep 2
    
    if [[ $(check_service_status) == "stopped" ]]; then
        log "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
restart() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
    stop
    sleep 2
    start
}

# –ö–æ–º–∞–Ω–¥–∞: –ª–æ–≥–∏
logs() {
    local follow=false
    local lines=50
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--follow)
                follow=true
                shift
                ;;
            -n|--lines)
                lines="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    
    echo "üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):"
    echo "========================================"
    
    if [[ "$follow" == true ]]; then
        sudo journalctl -u "$SERVICE_NAME" -n "$lines" -f
    else
        sudo journalctl -u "$SERVICE_NAME" -n "$lines" --no-pager
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
diagnose() {
    echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "======================"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [[ -f "server/.env" ]]; then
        echo "‚úÖ –§–∞–π–ª server/.env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo "‚ùå –§–∞–π–ª server/.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    if [[ -f "package.json" ]]; then
        echo "‚úÖ –§–∞–π–ª package.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo "‚ùå –§–∞–π–ª package.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if command -v node &> /dev/null; then
        echo "‚úÖ Node.js: $(node -v)"
    else
        echo "‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v npm &> /dev/null; then
        echo "‚úÖ NPM: $(npm -v)"
    else
        echo "‚ùå NPM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v psql &> /dev/null; then
        echo "‚úÖ PostgreSQL –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ùå PostgreSQL –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if [[ -f "server/.env" ]]; then
        source server/.env
        export PGPASSWORD="$DB_PASSWORD"
        
        if psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" &>/dev/null; then
            echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        fi
        
        unset PGPASSWORD
    else
        echo "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env —Ñ–∞–π–ª)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
    
    if netstat -tuln 2>/dev/null | grep -q ":5000 "; then
        echo "‚úÖ –ü–æ—Ä—Ç 5000 –æ—Ç–∫—Ä—ã—Ç"
    else
        echo "‚ùå –ü–æ—Ä—Ç 5000 –∑–∞–∫—Ä—ã—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    
    local available_space=$(df -BG . | awk 'NR==2 {print $4}' | sed 's/G//')
    if [[ $available_space -gt 1 ]]; then
        echo "‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${available_space}GB"
    else
        echo "‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${available_space}GB"
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
    echo ""
    log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
    sudo journalctl -u "$SERVICE_NAME" -n 5 --no-pager | grep -i error || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
}

# –ö–æ–º–∞–Ω–¥–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
update() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    if [[ $(check_service_status) == "running" ]]; then
        stop
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    if [[ -f "scripts/backup.sh" ]]; then
        bash scripts/backup.sh --quiet
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
    cd server && npm install && cd ..
    cd client && npm install && cd ..
    
    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    log "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π..."
    cd server && npm run migrate && cd ..
    
    # –°–±–æ—Ä–∫–∞ frontend
    log "–°–±–æ—Ä–∫–∞ frontend..."
    cd client && npm run build && cd ..
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
    start
    
    log "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü–æ–º–æ—â—å
show_help() {
    echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É—á—ë—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 –ö–û–ú–ê–ù–î–ê [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start                   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  stop                    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  restart                 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  status                  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo "  logs [–æ–ø—Ü–∏–∏]            –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  diagnose                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  update                  –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  backup                  –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
    echo ""
    echo "–û–ø—Ü–∏–∏ –¥–ª—è logs:"
    echo "  -f, --follow            –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  -n, --lines NUMBER      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start                –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  $0 logs -f              –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏"
    echo "  $0 logs -n 100          –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 1
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        start)
            start "$@"
            ;;
        stop)
            stop "$@"
            ;;
        restart)
            restart "$@"
            ;;
        status)
            status "$@"
            ;;
        logs)
            logs "$@"
            ;;
        diagnose)
            diagnose "$@"
            ;;
        update)
            update "$@"
            ;;
        backup)
            if [[ -f "scripts/backup.sh" ]]; then
                bash scripts/backup.sh "$@"
            else
                error "–°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        -h|--help|help)
            show_help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root
if [[ $EUID -eq 0 ]]; then
    error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
fi

# –ó–∞–ø—É—Å–∫
main "$@" 

# –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É—á—ë—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SERVICE_NAME="dental-backup"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
check_service_status() {
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        echo "running"
    else
        echo "stopped"
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ç—É—Å
status() {
    echo "ü¶∑ –°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É—á—ë—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏"
    echo "=========================================================="
    echo ""
    
    # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    local service_status=$(check_service_status)
    if [[ "$service_status" == "running" ]]; then
        echo -e "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: ${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: ${RED}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
    echo "–ò–º—è —Å–µ—Ä–≤–∏—Å–∞: $SERVICE_NAME"
    echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(systemctl show -p User --value $SERVICE_NAME 2>/dev/null || echo 'unknown')"
    echo "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(systemctl show -p WorkingDirectory --value $SERVICE_NAME 2>/dev/null || echo 'unknown')"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    if [[ "$service_status" == "running" ]]; then
        local uptime=$(systemctl show -p ActiveEnterTimestamp --value $SERVICE_NAME 2>/dev/null)
        if [[ -n "$uptime" ]]; then
            echo "–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: $uptime"
        fi
    fi
    
    echo ""
    
    # –°—Ç–∞—Ç—É—Å PostgreSQL
    if systemctl is-active --quiet postgresql; then
        echo -e "PostgreSQL: ${GREEN}–ó–∞–ø—É—â–µ–Ω${NC}"
    else
        echo -e "PostgreSQL: ${RED}–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
    echo ""
    echo "–°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:"
    if netstat -tuln 2>/dev/null | grep -q ":5000 "; then
        echo -e "–ü–æ—Ä—Ç 5000: ${GREEN}–û—Ç–∫—Ä—ã—Ç${NC}"
    else
        echo -e "–ü–æ—Ä—Ç 5000: ${RED}–ó–∞–∫—Ä—ã—Ç${NC}"
    fi
    
    if netstat -tuln 2>/dev/null | grep -q ":5432 "; then
        echo -e "–ü–æ—Ä—Ç 5432 (PostgreSQL): ${GREEN}–û—Ç–∫—Ä—ã—Ç${NC}"
    else
        echo -e "–ü–æ—Ä—Ç 5432 (PostgreSQL): ${RED}–ó–∞–∫—Ä—ã—Ç${NC}"
    fi
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo ""
    echo "–†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã:"
    echo "RAM: $(free -h | awk 'NR==2{printf "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %s –∏–∑ %s (%.1f%%)", $3, $2, $3/$2*100}')"
    echo "–î–∏—Å–∫: $(df -h . | awk 'NR==2{printf "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %s –∏–∑ %s (%s)", $3, $2, $5}')"
    
    # URL –¥–æ—Å—Ç—É–ø–∞
    echo ""
    echo "URL –¥–æ—Å—Ç—É–ø–∞:"
    local local_ip=$(hostname -I | awk '{print $1}')
    echo "‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π IP: http://$local_ip:5000"
    echo "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π IP: http://192.168.2.67:5000"
}

# –ö–æ–º–∞–Ω–¥–∞: –∑–∞–ø—É—Å–∫
start() {
    local service_status=$(check_service_status)
    
    if [[ "$service_status" == "running" ]]; then
        warn "–°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    log "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if ! systemctl is-active --quiet postgresql; then
        log "–ó–∞–ø—É—Å–∫ PostgreSQL..."
        sudo systemctl start postgresql
    fi
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    sudo systemctl start "$SERVICE_NAME"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 3
    
    if [[ $(check_service_status) == "running" ]]; then
        log "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        local max_attempts=10
        local attempt=1
        
        while [[ $attempt -le $max_attempts ]]; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 | grep -q "200\|302\|404"; then
                log "‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω"
                break
            fi
            
            if [[ $attempt -eq $max_attempts ]]; then
                warn "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
            else
                echo -n "."
                sleep 2
                ((attempt++))
            fi
        done
    else
        error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
stop() {
    local service_status=$(check_service_status)
    
    if [[ "$service_status" == "stopped" ]]; then
        warn "–°–µ—Ä–≤–∏—Å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi
    
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    sudo systemctl stop "$SERVICE_NAME"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    sleep 2
    
    if [[ $(check_service_status) == "stopped" ]]; then
        log "‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else
        error "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
restart() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã..."
    stop
    sleep 2
    start
}

# –ö–æ–º–∞–Ω–¥–∞: –ª–æ–≥–∏
logs() {
    local follow=false
    local lines=50
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–æ–≥–æ–≤
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--follow)
                follow=true
                shift
                ;;
            -n|--lines)
                lines="$2"
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    
    echo "üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ $lines —Å—Ç—Ä–æ–∫):"
    echo "========================================"
    
    if [[ "$follow" == true ]]; then
        sudo journalctl -u "$SERVICE_NAME" -n "$lines" -f
    else
        sudo journalctl -u "$SERVICE_NAME" -n "$lines" --no-pager
    fi
}

# –ö–æ–º–∞–Ω–¥–∞: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
diagnose() {
    echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "======================"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [[ -f "server/.env" ]]; then
        echo "‚úÖ –§–∞–π–ª server/.env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo "‚ùå –§–∞–π–ª server/.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    if [[ -f "package.json" ]]; then
        echo "‚úÖ –§–∞–π–ª package.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo "‚ùå –§–∞–π–ª package.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if command -v node &> /dev/null; then
        echo "‚úÖ Node.js: $(node -v)"
    else
        echo "‚ùå Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v npm &> /dev/null; then
        echo "‚úÖ NPM: $(npm -v)"
    else
        echo "‚ùå NPM –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    if command -v psql &> /dev/null; then
        echo "‚úÖ PostgreSQL –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ùå PostgreSQL –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if [[ -f "server/.env" ]]; then
        source server/.env
        export PGPASSWORD="$DB_PASSWORD"
        
        if psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" &>/dev/null; then
            echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        fi
        
        unset PGPASSWORD
    else
        echo "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env —Ñ–∞–π–ª)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤..."
    
    if netstat -tuln 2>/dev/null | grep -q ":5000 "; then
        echo "‚úÖ –ü–æ—Ä—Ç 5000 –æ—Ç–∫—Ä—ã—Ç"
    else
        echo "‚ùå –ü–æ—Ä—Ç 5000 –∑–∞–∫—Ä—ã—Ç"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    echo ""
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    
    local available_space=$(df -BG . | awk 'NR==2 {print $4}' | sed 's/G//')
    if [[ $available_space -gt 1 ]]; then
        echo "‚úÖ –°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${available_space}GB"
    else
        echo "‚ö†Ô∏è –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${available_space}GB"
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
    echo ""
    log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
    sudo journalctl -u "$SERVICE_NAME" -n 5 --no-pager | grep -i error || echo "–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
}

# –ö–æ–º–∞–Ω–¥–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
update() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    if [[ $(check_service_status) == "running" ]]; then
        stop
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    if [[ -f "scripts/backup.sh" ]]; then
        bash scripts/backup.sh --quiet
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
    cd server && npm install && cd ..
    cd client && npm install && cd ..
    
    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    log "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π..."
    cd server && npm run migrate && cd ..
    
    # –°–±–æ—Ä–∫–∞ frontend
    log "–°–±–æ—Ä–∫–∞ frontend..."
    cd client && npm run build && cd ..
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
    start
    
    log "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü–æ–º–æ—â—å
show_help() {
    echo "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É—á—ë—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 –ö–û–ú–ê–ù–î–ê [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start                   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  stop                    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  restart                 –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  status                  –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
    echo "  logs [–æ–ø—Ü–∏–∏]            –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  diagnose                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "  update                  –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  backup                  –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
    echo ""
    echo "–û–ø—Ü–∏–∏ –¥–ª—è logs:"
    echo "  -f, --follow            –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "  -n, --lines NUMBER      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 start                –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"
    echo "  $0 logs -f              –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏"
    echo "  $0 logs -n 100          –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 1
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        start)
            start "$@"
            ;;
        stop)
            stop "$@"
            ;;
        restart)
            restart "$@"
            ;;
        status)
            status "$@"
            ;;
        logs)
            logs "$@"
            ;;
        diagnose)
            diagnose "$@"
            ;;
        update)
            update "$@"
            ;;
        backup)
            if [[ -f "scripts/backup.sh" ]]; then
                bash scripts/backup.sh "$@"
            else
                error "–°–∫—Ä–∏–ø—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fi
            ;;
        -h|--help|help)
            show_help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 --help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root
if [[ $EUID -eq 0 ]]; then
    error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
fi

# –ó–∞–ø—É—Å–∫
main "$@" 